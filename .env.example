# Database (Local SQLite file path)
DATABASE_URL="tastebase.db"

# App Configuration
NEXT_PUBLIC_APP_URL="http://localhost:3000"

# Authentication
BETTER_AUTH_SECRET="your-super-secret-key-at-least-32-chars-long"
BETTER_AUTH_URL="http://localhost:3000"
BETTER_AUTH_TELEMETRY=0

# API Key Encryption (Required for AI features)
# ENCRYPTION_SECRET must be 64 characters with good entropy and character variety
# Must include: uppercase, lowercase, numbers, and special characters
# Generate using the script below or use: node -e "console.log(require('./src/lib/crypto/encryption').generateSecureSecret(64))"
#
# Generate secure encryption secret:
# node -e "
# const crypto = require('crypto');
# const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
# const lowercase = 'abcdefghijklmnopqrstuvwxyz';
# const numbers = '0123456789';
# const special = '!@#$%^&*()_+-=[]{}|;:,.<>?';
# let secret = '';
# secret += uppercase[crypto.randomInt(uppercase.length)];
# secret += lowercase[crypto.randomInt(lowercase.length)];
# secret += numbers[crypto.randomInt(numbers.length)];
# secret += special[crypto.randomInt(special.length)];
# const allChars = uppercase + lowercase + numbers + special;
# for (let i = 4; i < 64; i++) {
#   secret += allChars[crypto.randomInt(allChars.length)];
# }
# console.log(secret.split('').sort(() => crypto.randomInt(3) - 1).join(''));
# "
ENCRYPTION_SECRET="your-secure-64-char-secret-with-upper-lower-numbers-special-chars-here"
CURRENT_ENCRYPTION_VERSION=1

# AI Services (for Phase 3)
# OPENAI_API_KEY=""
# ANTHROPIC_API_KEY=""

# File Storage
UPLOAD_DIR="./uploads"
MAX_FILE_SIZE="10485760"
